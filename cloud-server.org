#+TITLE: Rackspace cloud server

* Brief summary

Rackspace cloud servers can be created, updated and deleted using Cloud Orchestration.

* Example template-1
In the following example template, we will create a single Linux server using orchestration service.
For the sake of simplicity, we will not use template parameters in this example.

#+BEGIN_SRC yaml
heat_template_version: 2014-10-16

description: |
  Creating Rackspace cloud server using orchestration service.

resources:
  test_server:
    type: "OS::Nova::Server"
    properties:
      name: test-server
      flavor: 2 GB General Purpose v1
      image: Debian 7 (Wheezy) (PVHVM)
outputs:
  server_ip:
    value:
      get_attr: [test_server, accessIPv4]
#+END_SRC


* Example template-2
In the following example template, we will create a single Linux server and provide user_data that can be
used by server when booting an image.

#+BEGIN_SRC yaml
heat_template_version: 2014-10-16

description: |
  Creating Rackspace cloud server with user_data.

resources:
  test_server:
    type: "OS::Nova::Server"
    properties:
      name: test-server
      flavor: 2 GB General Purpose v1
      image: Debian 7 (Wheezy) (PVHVM)
      user_data: |
          #!/bin/bash -x
          echo "hello world" > /root/hello-world.txt      
outputs:
  server_ip:
    value:
      get_attr: [test_server, accessIPv4]
#+END_SRC

This template creates a server in the Rackspace cloud and during the server boot time script provided
in the user_data property will be executed. Here user_data script is creating a hello-world.txt file
with 'hell world' as contents. You can login to the cloud server and verify that 'hello-world.txt' file
does exit or not.

Please note that if there was any error during execution of the script that was provided as user_data,
then it will be silently ignored and the stack-creation will be succeeded. To handle error scenarios,
please take a look at [[https://github.com/rackerlabs/rs-heat-docs/blob/master/swift-signal-handle.org][SwiftSignal]] resource documentation

* Example template-3
In the following example template, we will create a single Linux server providing
private key for SSH access.

#+BEGIN_SRC yaml
heat_template_version: 2014-10-16

description: |
  Creating Rackspace cloud server with SSH access private key.

resources:
  ssh_key:
    type: OS::Nova::KeyPair
    properties:
      name: private_access_key
      save_private_key: true
      
  test_server:
    type: "OS::Nova::Server"
    properties:
      name: test-server
      flavor: 2 GB General Purpose v1
      image: Debian 7 (Wheezy) (PVHVM)
      key_name: { get_resource: ssh_key }
outputs:
  server_ip:
    value:
      get_attr: [test_server, accessIPv4]
  private_key:
    value:
      get_attr: [ssh_key, private_key]
#+END_SRC

This template first creates a Nova server key pair. Instead of using username/password,
private_key can be used to access the server.

Please note that if there was any error during execution of the script that was provided as user_data,
then it will be silently ignored and the stack-creation will be succeeded. To handle error scenarios,
please take a look at SwiftSignal resource documentation<TODO: link from here to SwiftSignal>

* Example template-4
This template create a single Linux server and install wordpress application on the server.

#+BEGIN_SRC yaml
heat_template_version: 2014-10-16

description: |
  Create a Rackspace cloud server and install wordpress application.

resources:
  wordpress_server:
    type: "OS::Nova::Server"
    properties:
      name: test-server
      flavor: 2 GB General Purpose v1
      image: Debian 7 (Wheezy) (PVHVM)
      user_data:
        str_replace:
          template: |
            #!/bin/bash -v
            yum -y install mysql-server httpd wordpress
            sed -i "/Deny from All/d" /etc/httpd/conf.d/wordpress.conf
            sed -i "s/Require local/Require all granted/" /etc/httpd/conf.d/wordpress.conf
            sed --in-place --e "s/localhost/%dbhost%/" --e "s/database_name_here/%dbname%/" --e "s/username_here/%dbuser%/" --e "s/password_here/%dbpass%/" /usr/share/wordpress/wp-config.php
            /etc/init.d/httpd start
            chkconfig httpd on
            /etc/init.d/mysqld start
            chkconfig mysqld on
            cat << EOF | mysql
            CREATE DATABASE %dbname%;
            GRANT ALL PRIVILEGES ON %dbname%.* TO "%dbuser%"@"localhost"
            IDENTIFIED BY "%dbpass%";
            FLUSH PRIVILEGES;
            EXIT
            EOF
            iptables -I INPUT -p tcp --dport 80 -j ACCEPT
            iptables-save > /etc/sysconfig/iptables
          params:
            "%dbhost%": localhost
            "%dbname%": wordpress
            "%dbuser%": admin
            "%dbpass%": test_pass
outputs:
  server_public_ip:
    value:
      get_attr: [wordpress_server, accessIPv4]
      description: The public ip address of the server

  website_url:
    value:
      str_replace:
        template: http://%ip%/wordpress
        params:
          "%ip%": { get_attr: [ wordpress_server, accessIPv4 ] }
    description: URL for Wordpress wiki      
#+END_SRC

Please note that, to keep the template simple all the values were hard coded in the above template. 



* Reference

- [[http://docs.rackspace.com/orchestration/api/v1/orchestration-devguide/content/overview.html][Cloud Orchestration API Developer Guide]]
- [[http://docs.openstack.org/developer/heat/template_guide/hot_spec.html][Heat Orchestration Template (HOT) Specification]]
- [[http://cloudinit.readthedocs.org/en/latest/topics/format.html][Cloud-init format documentation]]
- [[http://docs.rackspace.com/servers/api/v2/cs-gettingstarted/content/overview.html][Cloud servers getting started guide]]
- [[http://docs.rackspace.com/servers/api/v2/cs-devguide/content/ch_preface.html][Cloud servers API developer guide]]
- [[http://www.rackspace.com/knowledge_center/product-faq/cloud-servers][Cloud servers FAQs]]
- [[http://www.rackspace.com/knowledge_center/article/cloud-servers-how-to-articles-other-resources][Cloud servers How to articles and other resources]]
