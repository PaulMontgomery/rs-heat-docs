#+TITLE: SwiftSignal and SwiftSignalHandle

* Brief summary

SwiftSingal can be used to coordinate resource creation with notifications/signals that could be coming from 
sources external or internal to the stack. It is often used in conjunction with SwiftSignalHandle resource.

SwiftSignalHandle is used to create a temporary URL and this URL is used by applications/scripts to send signals.
SwiftSignal resource waits on this URL for a specified number of signals in given time. 

* Example template
In the following example template, we will set up a single node linux server that signals success/failure
of user_data script execution at a given URL. 

Start by adding the top-level template sections:

#+BEGIN_SRC yaml
heat_template_version: 2014-10-16

description: |
  Single node linux server with swift signaling.

resources:

outputs:

#+END_SRC

** Resources section

*** Add a SwiftSignalHandle resource
SwiftSignalHandle is a resource to create temporary URL to receive notification/signals.

#+BEGIN_SRC yaml
  signal_handle:
    type: "OS::Heat::SwiftSignalHandle"
#+END_SRC

*** Add a Server resource
Add a linux server with a bash script in user_data property. At the end of the script execution send a 
success/failure message to the temporary URL created by the above SwiftSignalHandle resource.

#+BEGIN_SRC yaml
  linux_server:
    type: OS::Nova::Server
    properties:
      image: 4b14a92e-84c8-4770-9245-91ecb8501cc2
      flavor: 1 GB Performance
      user_data:
        str_replace:
          template: |
            #!/bin/bash -x
            # assume you are doing a long running operation here
            sleep 300

            # Assuming long running operation completed successfully, notify success signal
            wc_notify --data-binary '{"status": "SUCCESS"}'

          params:
            wc_notify: { get_attr: ['signal_handle', 'curl_cli'] 
#+END_SRC


*** Add SwiftSignal resource
SwiftSignal resource waits for specified number of signals(number is provided as 'count' property)
on the given URL('handle' property). The stack will be marked as failure if specificed number of 
signals are not received in given timeout.

#+BEGIN_SRC yaml
  wait_on_server:
    type: OS::Heat::SwiftSignal
    properties:
      handle: {get_resource: signal_handle}
      count: 1
      timeout: 600
#+END_SRC

Here SwiftSignal resource would wait for 600 seconds to receive 1 signal on the handle.


** Outputs section
Add swift signal URL to the outputs section.

#+BEGIN_SRC yaml
  signal_url:
    value: { get_attr: ['wait_handle', 'curl_cli'] }
    description: Swift signal URL
  
  server_public_ip:
    value:{ get_attr: [ linux_server, accessIPv4 ] }
    description: Linux server public IP
#+END_SRC

** Full Example Template
#+BEGIN_SRC yaml
heat_template_version: 2014-10-16

description: |
  Single node linux server with swift signaling.

resources:
  signal_handle:
    type: "OS::Heat::SwiftSignalHandle"

  linux_server:
    type: OS::Nova::Server
    properties:
      image: 4b14a92e-84c8-4770-9245-91ecb8501cc2
      flavor: 1 GB Performance
      user_data:
        str_replace:
          template: |
            #!/bin/bash -x
            # assume you are doing a long running operation here
            sleep 300

            # Assuming long running operation completed successfully, notify success signal
            wc_notify --data-binary '{"status": "SUCCESS"}'

          params:
            wc_notify: { get_attr: ['signal_handle', 'curl_cli'] 
            
  wait_on_server:
    type: OS::Heat::SwiftSignal
    properties:
      handle: {get_resource: signal_handle}
      count: 1
      timeout: 600

outputs:
  signal_url:
    value: { get_attr: ['signal_handle', 'curl_cli'] }
    description: Swift signal URL
  
  server_public_ip:
    value:{ get_attr: [ linux_server, accessIPv4 ] }
    description: Linux server public IP
#+END_SRC

* Reference

- [[http://docs.rackspace.com/orchestration/api/v1/orchestration-devguide/content/overview.html][Cloud Orchestration API Developer Guide]]
- [[http://docs.openstack.org/developer/heat/template_guide/hot_spec.html][Heat Orchestration Template (HOT) Specification]]
- [[http://cloudinit.readthedocs.org/en/latest/topics/format.html][Cloud-init format documentation]]
- [[http://docs.rackspace.com/files/api/v1/cf-devguide/content/TempURL-d1a4450.html][Swift TempURL]]
